#!/usr/bin/env bash

# Usage: .taskfile/runtime ./taskfile [task1 task2 ...]
# Or as shebang: #!.taskfile/runtime 

# Include all tasks from the actual taskfile
source $1 ""
shift;

# Keep track of tasks that have been run, this is used to came arround
# declare -A (associative arrays) which is only available since bash 4.0.
function set {
  eval "tasks_$1=TRUE"
}

function get {
  echo $(eval "echo \$tasks_$1")
}

# Allows a task to declare a dependency on another task, which will then only be run once
function needs {
  for task in $@; do
    if [[ $(get $1) = "TRUE" ]]; then
      return
    fi
    set $1
    "task:"$1
  done
}

# The actual tasks to execute
jobs=()
while [[ $# -gt 0 ]]; do
  case $1 in
    --*|-*) 
      if ! type "flag:$1" >/dev/null 2>&1; then
        echo "Unknown option $1" 1>&2
      else
	  	  # 'Run' the flag
        "flag:"$1 2>/dev/null || echo "Unknown option $1"
      fi
      ;;
    *)
      jobs+=("$1");;
    esac
    shift
done

if [[ ${#jobs[@]} -eq 0 ]]; then
  echo "Nothing to do"
fi

# Run the tasks
for task in "${jobs[@]}"; do
  if ! type "task:$task" >/dev/null 2>&1; then
    echo "Unknown task $task" 1>&2
  else
    needs $task
  fi
done
